#!/usr/bin/env python3

import sys

# If we can open fname, then return its data; otherwise, raise an exception
def file_data(fname):
    with open(fname, 'rb') as f:
        return f.read()
    raise Exception("failed to read file %s" % (fname))

data = b''

# These must be appended in the exact order indicated by the struct definition
# in objstore.h
data += file_data('./data/apple2e.rom')         # Internal ROM ($C000..$FFFF)
data += file_data('./data/peripheral.rom')      # $C000..$CFFF

# Let's not keep calling len(data) since we know it won't change over our
# iterations
data_len = len(data)

# This just defines the variable name for the store data
sys.stdout.write("package obj\n\n")
sys.stdout.write('import "github.com/pevans/erc/memory"\n\n')
sys.stdout.write("var storeData = []uint8{\n\t")
#sys.stdout.write("static unsigned char store_data[] =\n")

# This loop will write out a series of 16 characters given in hexadecimal
# escape, preceded by a quote and ending in a quote. C will automatically
# append literal strings when given one after another with no other punctuation
# (e.g. "abc" "def" is equivalent to "abcdef"). The first sys.stdout.write()
# will start us off with the first line's quote mark.
for i in range(0, data_len):
    sys.stdout.write("0x%02X, " % (data[i]))
    if i == data_len - 1:
        break
    if i > 0 and (i+1) % 16 == 0:
        sys.stdout.write(' // %06X\n\t' % (i))

# And we're about done; finish with the last quote, and then terminate with a
# semicolon.
sys.stdout.write("\n}")

# vim:ft=python:
